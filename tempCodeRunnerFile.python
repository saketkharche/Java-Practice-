import unittest

def getMaxProfit(profit, n, m, k):
    dp = [[[0 for _ in range(k+1)] for _ in range(m+1)] for _ in range(n+1)]
    for i in range(1, n+1):
        for j in range(1, m+1):
            for p in range(k+1):
                for l in range(max(0, i-k), i):
                    dp[i][j][p] = max(dp[i][j][p], dp[l][j-1][p] + profit[i-1][j-1])
                dp[i][j][p] = max(dp[i][j][p], dp[i][j-1][p])
    return max(dp[i][m][k] for i in range(1, n+1))


class TestGetMaxProfit(unittest.TestCase):
    def test_get_max_profit(self):
        profit = [[1, 3, 1], [2, 1, 3], [1, 1, 4]]
        n = 3
        m = 3
        k = 1
        result = getMaxProfit(profit, n, m, k)
        self.assertEqual(result, 8)


if __name__ == '__main__':
    unittest.main()